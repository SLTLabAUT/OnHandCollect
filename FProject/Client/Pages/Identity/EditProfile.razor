@page "/identity/profile"
@using FProject.Shared.Resources
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using FProject.Client.Services
@attribute [Authorize]

<IdentityTemplate Title="تغییرات اطلاعات کاربری">
    @if (Model is null)
    {
        <Spinner Size=@SpinnerSize.Large />
    }
    else
    {
        <EditForm EditContext=EditContext OnValidSubmit=FormHandler>
            <DataAnnotationsValidator />
            <FluentUIValidationSummary />
            @if (Done)
            {
                <MessageBar MessageBarType="MessageBarType.Success" OnDismiss="DismissMessagebarHandler">
                    اطلاعات کاربری شما با موفقیت تغییر کرد.
                </MessageBar>
            }
            <MyBFUTextField Label=@(Utils.GetDisplayName<ProfileModel>(m => m.Email)) @bind-Value=@Model.Email Disabled=true @bind-Value:event="OnChange" AdditionalAttributes=@(new Dictionary<string, object>() { { "name", "username" } }) />
            <MyBFUDropdown ItemsSource=HandednessOptions
                           Placeholder="یک گزینه را برگزینید..."
                           @bind-SelectedOption=Model.Handedness
                           Label=@(Utils.GetDisplayName<ProfileModel>(b => b.Handedness))
                           Required=true />
            <MyBFUTextField Label=@(Utils.GetDisplayName<ProfileModel>(m => m.PhoneNumber)) @bind-Value=@Model.PhoneNumber @bind-Value:event="OnChange" />
            <MyBFUDropdown ItemsSource=SexOptions
                           Placeholder="یک گزینه را برگزینید..."
                           @bind-SelectedOption=Model.Sex
                           Label=@(Utils.GetDisplayName<ProfileModel>(b => b.Sex)) />
            <MyBFUNumericTextField TValue="short?" Label=@(Utils.GetDisplayName<ProfileModel, short?>(b => b.BirthYear)) @bind-Value=@Model.BirthYear @bind-Value:event="OnChange" ParsingErrorMessage="مقدار {0} باید مقداری عددی در محدوده‌ی مجاز باشد." />
            <MyBFUDropdown ItemsSource=EducationOptions
                           Placeholder="یک گزینه را برگزینید..."
                           @bind-SelectedOption=Model.Education
                           Label=@(Utils.GetDisplayName<ProfileModel>(b => b.Education)) />
            <Stack HorizontalAlign=Alignment.Center VerticalAlign=Alignment.Center Tokens=@(new StackTokens { ChildrenGap = new double[] { 10 } })>
                <StackItem Align=Alignment.Center>
                    <SubmitButton Text="اعمال تغییرات" />
                </StackItem>
            </Stack>
        </EditForm>
    }
</IdentityTemplate>

@code {
    [Inject]
    HttpClient Http { get; set; }
    [Inject]
    AuthorizeApi AuthorizeApi { get; set; }

    IEnumerable<IDropdownOption> SexOptions { get; set; }
    IEnumerable<IDropdownOption> EducationOptions { get; set; }
    IEnumerable<IDropdownOption> HandednessOptions { get; set; }
    bool Done { get; set; }
    ProfileModel Model { get; set; }
    EditContext EditContext { get; set; }

    protected override void OnInitialized()
    {
        SexOptions = Enum.GetValues<Sex>()
            .Select(p => new DropdownOption
            {
                Text = p.GetAttribute<DisplayAttribute>().Name,
                Key = ((int)p).ToString()
            });
        EducationOptions = Enum.GetValues<Education>()
            .Select(p => new DropdownOption
            {
                Text = p.GetAttribute<DisplayAttribute>().Name,
                Key = ((int)p).ToString()
            });
        HandednessOptions = Enum.GetValues<Handedness>()
            .Select(p => new DropdownOption
            {
                Text = p.GetAttribute<DisplayAttribute>().Name,
                Key = ((int)p).ToString()
            });
    }

    protected override async Task OnParametersSetAsync()
    {
        Model = (ProfileModel)await Http.GetFromJsonAsync<UserDTO>("api/Identity/UserInfo");
        EditContext = new EditContext(Model);
    }

    async Task FormHandler()
    {
        Done = false;

        var result = await Http.PostAsJsonAsync($"api/Identity/UpdateProfile", (UserDTO)Model);
        result.EnsureSuccessStatusCode();
        await AuthorizeApi.UpdateToken(await result.Content.ReadAsStringAsync());

        Done = true;
    }

    void DismissMessagebarHandler()
    {
        Done = false;
    }

    public class ProfileModel
    {
        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(ErrorMessageResource))]
        [EmailAddress(ErrorMessageResourceName = "EmailAddress", ErrorMessageResourceType = typeof(ErrorMessageResource))]
        [Display(Name = "رایانامه")]
        public string Email { get; set; }
        [RegularExpression(@"^(?:\+98|0)\d{10}$", ErrorMessageResourceName = "PhoneNumber", ErrorMessageResourceType = typeof(ErrorMessageResource))]
        [Display(Name = "شماره‌ی تلفن همراه")]
        public string PhoneNumber { get; set; }
        [Display(Name = "جنسیت")]
        public IDropdownOption Sex { get; set; }
        [Range(1200, 1400, ErrorMessageResourceName = "Range", ErrorMessageResourceType = typeof(ErrorMessageResource))]
        [Display(Name = "سال تولد")]
        public short? BirthYear { get; set; }
        [Display(Name = "سطح تحصیلات")]
        public IDropdownOption Education { get; set; }
        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(ErrorMessageResource))]
        [Display(Name = "راست‌دستی و چپ‌دستی")]
        public IDropdownOption Handedness { get; set; }

        public static explicit operator UserDTO(ProfileModel model)
        {
            return new UserDTO
            {
                Email = model.Email,
                PhoneNumber = model.PhoneNumber,
                Sex = model.Sex is null ? null : Enum.Parse<Sex>(model.Sex.Key),
                BirthYear = model.BirthYear,
                Education = model.Education is null ? null : Enum.Parse<Education>(model.Education.Key),
                Handedness = Enum.Parse<Handedness>(model.Handedness.Key),
            };
        }

        public static explicit operator ProfileModel(UserDTO model)
        {
            return new ProfileModel
            {
                Email = model.Email,
                PhoneNumber = model.PhoneNumber,
                Sex = model.Sex is null ? null : new DropdownOption
                {
                    Text = model.Sex.GetAttribute<DisplayAttribute>().Name,
                    Key = ((int)model.Sex).ToString()
                },
                BirthYear = model.BirthYear,
                Education = model.Education is null ? null : new DropdownOption
                {
                    Text = model.Education.GetAttribute<DisplayAttribute>().Name,
                    Key = ((int)model.Education).ToString()
                },
                Handedness = new DropdownOption
                {
                    Text = model.Handedness.GetAttribute<DisplayAttribute>().Name,
                    Key = ((int)model.Handedness).ToString()
                },
            };
        }
    }
}
