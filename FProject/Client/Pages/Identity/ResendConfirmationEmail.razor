@page "/identity/resendconfirmationemail"

<IdentityTemplate Title="بازارسال تاییدیه‌ی رایانامه">
    <EditForm EditContext=EditContext OnValidSubmit=FormHandler>
        <DataAnnotationsValidator />
        <FluentUIValidationSummary />
        @if (Done)
        {
            <MessageBar MessageBarType="MessageBarType.Success" OnDismiss="DismissMessagebarHandler">
                در صورتی که در سامانه ثبت‌نام کرده باشید و رایانامه‌ی شما تایید نشده باشد، رایانامه‌ای حاوی لینک تایید برایتان بازارسال گردیده است.
            </MessageBar>
        }
        <MyBFUTextField Label=@(Utils.GetDisplayName<ForgotPasswordDTO>(m => m.Email)) @bind-Value=@Model.Email @bind-Value:event="OnChange" AdditionalAttributes=@(new Dictionary<string, object>() { { "name", "username" } }) />
        <Stack HorizontalAlign=Alignment.Center VerticalAlign=Alignment.Center Tokens=@(new StackTokens { ChildrenGap = new double[] { 10 } })>
            <StackItem Align=Alignment.Center>
                <Button ButtonType=ButtonType.Submit @ref="SubmitButton" ManualStateControl=true Text="درخواست لینک تایید رایانامه" />
            </StackItem>
        </Stack>
    </EditForm>
</IdentityTemplate>

@code {
    [Inject]
    HttpClient Http { get; set; }

    bool Done { get; set; }
    ForgotPasswordDTO Model { get; set; }
    EditContext EditContext { get; set; }
    Button SubmitButton { get; set; }

    protected override Task OnInitializedAsync()
    {
        Model = new ForgotPasswordDTO();
        EditContext = new EditContext(Model);

        return base.OnInitializedAsync();
    }

    async Task FormHandler()
    {
        SubmitButton.State = ButtonState.Acting;
        try
        {
            Done = false;

            var result = await Http.PostAsync($"api/Identity/ResendConfirmationEmail?email={Model.Email}", null);
            result.EnsureSuccessStatusCode();

            Done = true;
        }
        finally
        {
            SubmitButton.State = ButtonState.None;
        }
    }

    void DismissMessagebarHandler()
    {
        Done = false;
    }
}
