@page "/identity/resetpassword"
@using Microsoft.AspNetCore.WebUtilities

<IdentityTemplate Title="بازنشانی رمز عبور">
    <EditForm EditContext=EditContext OnValidSubmit=FormHandler>
        <DataAnnotationsValidator />
        <BFUValidationSummary />
        @if (Done)
        {
            <BFUMessageBar MessageBarType="MessageBarType.Success" IsMultiline="false">
                <Actions>
                    <BFUMessageBarButton Text="ورود به سامانه" Href="/identity/login" />
                </Actions>
                <ChildContent>
                    رمز عبور شما با موفقیت تغییر کرد.
                </ChildContent>
            </BFUMessageBar>
        }
        else if (IsTokenInvalid)
        {
            <BFUMessageBar MessageBarType="MessageBarType.Error" IsMultiline="false">
                <Actions>
                    <BFUMessageBarButton Text="درخواست دوباره‌ی لینک بازنشانی رمز عبور" Href="/identity/forgotpassword" />
                </Actions>
                <ChildContent>
                    لینک بازنشانی رمز عبور شما منقضی شده است، لطفا اقدام به دریافت دوباره‌ی آن نمایید.
                </ChildContent>
            </BFUMessageBar>
        }
        <BFUTextField Label=@(Utils.GetDisplayName<ResetPasswordDTO>(m => m.Password)) InputType=@InputType.Password @bind-Value=@Model.Password ValidateOnLoad=false ValidateOnFocusOut=true ValidateOnFocusIn=true />
        <BFUTextField Label=@(Utils.GetDisplayName<ResetPasswordDTO>(m => m.ConfirmPassword)) InputType=@InputType.Password @bind-Value=@Model.ConfirmPassword ValidateOnLoad=false ValidateOnFocusOut=true ValidateOnFocusIn=true />
        <BFUStack HorizontalAlign=Alignment.Center VerticalAlign=Alignment.Center Tokens=@(new BFUStackTokens { ChildrenGap = new double[] { 10 } })>
            <BFUStackItem Align=Alignment.Center>
                <BFUSubmitButton Text="ثبت رمز عبور جدید" />
            </BFUStackItem>
        </BFUStack>
    </EditForm>
</IdentityTemplate>

@code {
    [Inject]
    HttpClient Http { get; set; }
    [Inject]
    NavigationManager Navigation { get; set; }

    [Parameter]
    public string Email { get; set; }
    [Parameter]
    public string Token { get; set; }

    bool Done { get; set; }
    bool IsTokenInvalid { get; set; }
    ResetPasswordDTO Model { get; set; }
    EditContext EditContext { get; set; }

    protected override Task OnInitializedAsync()
    {
        var query = new Uri(Navigation.Uri).Query;
        foreach (var queryItem in QueryHelpers.ParseQuery(query))
        {
            switch (queryItem.Key)
            {
                case "token":
                    Token = queryItem.Value;
                    break;
                case "email":
                    Email = queryItem.Value;
                    break;
            }
        }

        Model = new ResetPasswordDTO
        {
            Email = Email,
            Token = Token
        };
        EditContext = new EditContext(Model);

        return base.OnInitializedAsync();
    }

    async Task FormHandler()
    {
        Done = false;
        IsTokenInvalid = false;

        var result = await Http.PostAsJsonAsync($"api/Identity/ResetPassword", Model);
        var response = await result.Content.ReadFromJsonAsync<IdentityErrorsResponse>();

        if (result.IsSuccessStatusCode)
        {
            Done = true;
        }
        else if (response.Errors.Any(e => e.Code == "InvalidToken"))
        {
            IsTokenInvalid = true;
        }
    }

    void DismissMessagebarHandler()
    {
        Done = false;
        IsTokenInvalid = false;
    }
}
